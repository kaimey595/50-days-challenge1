from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.alert import Alert
import time

# Setup Chrome browser
driver = webdriver.Chrome()
driver.maximize_window()
driver.get("https://the-internet.herokuapp.com/")
time.sleep(2)

# 1Ô∏è‚É£ Broken Images
driver.find_element(By.LINK_TEXT, "Broken Images").click()
images = driver.find_elements(By.TAG_NAME, "img")
print(f"\nüîç Found {len(images)} images. Checking for broken ones...")
for i, img in enumerate(images):
    if img.get_attribute('naturalWidth') == '0':
        print(f"‚ùå Image {i+1} is broken")
    else:
        print(f"‚úÖ Image {i+1} is OK")
driver.back()

# 2Ô∏è‚É£ Drag and Drop
driver.find_element(By.LINK_TEXT, "Drag and Drop").click()
box_a = driver.find_element(By.ID, "column-a")
box_b = driver.find_element(By.ID, "column-b")
driver.execute_script("""
function simulateDragDrop(sourceNode, destinationNode) {
    var EVENT_TYPES = {
        DRAG_END: 'dragend',
        DRAG_START: 'dragstart',
        DROP: 'drop'
    }

    function createCustomEvent(type) {
        var event = new CustomEvent("CustomEvent")
        event.initCustomEvent(type, true, true, null)
        event.dataTransfer = {
            data: {},
            setData: function(type, val) {
                this.data[type] = val
            },
            getData: function(type) {
                return this.data[type]
            }
        }
        return event
    }

    function dispatchEvent(node, type, event) {
        if (node.dispatchEvent) {
            return node.dispatchEvent(event)
        }
        if (node.fireEvent) {
            return node.fireEvent("on" + type, event)
        }
    }

    var dragStartEvent = createCustomEvent(EVENT_TYPES.DRAG_START)
    dispatchEvent(sourceNode, EVENT_TYPES.DRAG_START, dragStartEvent)

    var dropEvent = createCustomEvent(EVENT_TYPES.DROP)
    dropEvent.dataTransfer = dragStartEvent.dataTransfer
    dispatchEvent(destinationNode, EVENT_TYPES.DROP, dropEvent)

    var dragEndEvent = createCustomEvent(EVENT_TYPES.DRAG_END)
    dragEndEvent.dataTransfer = dragStartEvent.dataTransfer
    dispatchEvent(sourceNode, EVENT_TYPES.DRAG_END, dragEndEvent)
}
simulateDragDrop(arguments[0], arguments[1])
""", box_a, box_b)
print("‚úÖ Drag and drop completed.")
driver.back()

# 3Ô∏è‚É£ Form Authentication
driver.find_element(By.LINK_TEXT, "Form Authentication").click()
driver.find_element(By.ID, "username").send_keys("tomsmith")
driver.find_element(By.ID, "password").send_keys("SuperSecretPassword!")
driver.find_element(By.CSS_SELECTOR, "button[type='submit']").click()
time.sleep(1)
msg = driver.find_element(By.ID, "flash").text
print(f"üîê Login message: {msg.strip()}")
driver.back()

# 4Ô∏è‚É£ Dropdown
driver.find_element(By.LINK_TEXT, "Dropdown").click()
dropdown = driver.find_element(By.ID, "dropdown")
dropdown.click()
dropdown.find_element(By.CSS_SELECTOR, "option[value='2']").click()
print("‚úÖ Option 2 selected in dropdown.")
driver.back()

# 5Ô∏è‚É£ JavaScript Alerts
driver.find_element(By.LINK_TEXT, "JavaScript Alerts").click()
driver.find_element(By.XPATH, "//button[text()='Click for JS Alert']").click()
Alert(driver).accept()
print("‚úÖ JS Alert handled.")

# ‚úÖ Done
time.sleep(2)
driver.quit()
